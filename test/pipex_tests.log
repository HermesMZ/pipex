=== PIPEX ADVANCED TEST LOG ===
Date: jeu. 07 août 2025 13:07:36 CEST
User: zoum
Directory: /home/zoum/code/pipex/test
Log file: pipex_tests.log
===============================
[0;36m╔══════════════════════════════════════╗[0m
[0;36m║      PIPEX ADVANCED TEST RUNNER      ║[0m
[0;36m╚══════════════════════════════════════╝[0m
[1;33m🔨 Pipex not found, compiling...[0m
[1;33m⠋[0m Compiling pipex[0;32m✓[0m Compiling pipex
[1;33m⠋[0m Building pipex[1;33m⠙[0m Building pipex[1;33m⠹[0m Building pipex[1;33m⠸[0m Building pipex[1;33m⠼[0m Building pipex[1;33m⠴[0m Building pipex[1;33m⠦[0m Building pipex[1;33m⠧[0m Building pipex[1;33m⠇[0m Building pipex[1;33m⠏[0m Building pipex[1;33m⠋[0m Building pipex[1;33m⠙[0m Building pipex[1;33m⠹[0m Building pipex[1;33m⠸[0m Building pipex[1;33m⠼[0m Building pipex[1;33m⠴[0m Building pipex[1;33m⠦[0m Building pipex[1;33m⠧[0m Building pipex[1;33m⠇[0m Building pipex[1;33m⠏[0m Building pipex[1;33m⠋[0m Building pipex[1;33m⠙[0m Building pipex[1;33m⠹[0m Building pipex[1;33m⠸[0m Building pipex[0;32m✓[0m Building pipex
[0;32m✅ Compilation successful[0m

[0;35m🎯 Select test suite to run:[0m
[0;34m1)[0m 🔧 Basic version tests (basic + errors)
[0;34m2)[0m 🌟 Bonus version tests (basic + errors + bonus features)
[0;34m3)[0m ⚠️  Error handling tests only
[0;34m4)[0m 🚀 Full test suite (basic version + bonus version)
[0;34m5)[0m 📊 Quick validation test
[0;34m6)[0m 🚪 Exit
[1;33mEnter your choice (1-6): [0m
[0;36m� Running Complete Test Suite...[0m

[1;33m📋 Test Plan:[0m
  1️⃣  Basic version tests (basic + errors)
  2️⃣  Bonus version tests (bonus features)

[0;36m🔧 Testing Basic Version...[0m

[0;35m🚀 Launching Basic Tests[0m
[0;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;34m📂 Script: test_basic.sh[0m
[0;34m⏰ Started: 2025-08-07 13:07:47[0m
[0;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[1;33m=== PIPEX BASIC TESTS ===[0m
Date: jeu. 07 août 2025 13:07:47 CEST
User: zoum
Directory: /home/zoum/code/pipex/test
Log saved in: pipex_tests.log
Compiling pipex...[0m
   [1;33m→[0m Running make clean...
   [1;33m→[0m Running make (basic version)...
Creating test files...[0m
   [1;33m→[0m Creating test_input.txt
   [1;33m→[0m Creating test_multiline.txt
   [1;33m→[0m Creating test_words.txt
   [1;33m→[0m Creating test_empty.txt
   [1;33m→[0m Creating test_large.txt (100 lines)

[1;33m--- Basic functionality tests ---[0m
[0;34m🧪 Running:[0m Basic ls | wc -l
   Command: pipex "test_multiline.txt" "cat" "wc -l" "out1_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: 5 ...
   Pipex exitcode: 0
   bash output: 5 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Basic ls | wc -l - Output and exit code

[0;34m🧪 Running:[0m grep | wc -w
   Command: pipex "test_words.txt" "grep apple" "wc -w" "out2_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: 2 ...
   Pipex exitcode: 0
   bash output: 2 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: grep | wc -w - Output and exit code

[0;34m🧪 Running:[0m cat | sort
   Command: pipex "test_words.txt" "cat" "sort" "out3_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: apple apple banana cherry date ...
   Pipex exitcode: 0
   bash output: apple apple banana cherry date ...
   bash exitcode: 0
[0;32m✓ PASS[0m: cat | sort - Output and exit code

[0;34m🧪 Running:[0m head | tail
   Command: pipex "test_large.txt" "head -10" "tail -5" "out4_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: Line 6 with some random text and numbers 748 Line ...
   Pipex exitcode: 0
   bash output: Line 6 with some random text and numbers 748 Line ...
   bash exitcode: 0
[0;32m✓ PASS[0m: head | tail - Output and exit code

[0;34m🧪 Running:[0m sort | uniq
   Command: pipex "test_words.txt" "sort" "uniq" "out5_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: apple banana cherry date ...
   Pipex exitcode: 0
   bash output: apple banana cherry date ...
   bash exitcode: 0
[0;32m✓ PASS[0m: sort | uniq - Output and exit code


[1;33m--- Error handling tests ---[0m
[0;34m🧪 Testing error:[0m No arguments
   Command: ../pipex
   [1;33m→[0m Executing...
   [1;33m→[0m Exit code: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: No arguments

[0;34m🧪 Testing error:[0m Too few arguments
   Command: ../pipex infile cmd1
   [1;33m→[0m Executing...
   [1;33m→[0m Exit code: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Too few arguments

[0;34m🧪 Testing error:[0m Non-existent input file
   Command: ../pipex nonexistent.txt cat wc -l out_error.txt
   [1;33m→[0m Executing...
   [1;33m→[0m Exit code: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Non-existent input file

[0;34m🧪 Testing error:[0m Invalid command
   Command: ../pipex test_input.txt invalidcommand123 cat out_error.txt
   [1;33m→[0m Executing...
   [1;33m→[0m Exit code: 127
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Invalid command

[0;34m🧪 Testing error:[0m Permission denied output
   Command: ../pipex test_input.txt cat wc -l /root/noperm.txt
   [1;33m→[0m Executing...
   [1;33m→[0m Exit code: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Permission denied output


[1;33m--- Edge cases ---[0m
[0;34m🧪 Running:[0m Empty file
   Command: pipex "test_empty.txt" "cat" "wc -l" "out_empty_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: 1 ...
   Pipex exitcode: 0
   bash output: 1 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Empty file - Output and exit code

[0;34m🧪 Running:[0m Commands with args
   Command: pipex "test_multiline.txt" "head -3" "tail -2" "out_args_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: line2 line3 ...
   Pipex exitcode: 0
   bash output: line2 line3 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Commands with args - Output and exit code

[0;34m🧪 Running:[0m Absolute paths
   Command: pipex "test_input.txt" "/bin/cat" "/usr/bin/wc -c" "out_abs_pipex.txt"
   [0;32m✓[0m File descriptors properly managed
   Pipex output: 20 ...
   Pipex exitcode: 0
   bash output: 20 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Absolute paths - Output and exit code


[1;33m=== TEST SUMMARY ===[0m
Total tests: 13
[0;32mPassed: 13[0m
[0;31mFailed: 0[0m

[0;34mCleaning temporary files...[0m
Temporary files removed

[0;32m🎉 All tests passed![0m
Complete log saved in: pipex_tests.log

[0;32m🎉 Basic Tests completed successfully![0m
[0;36m⏱️  Duration: 2s[0m
[0;36m⏰ Finished: 2025-08-07 13:07:49[0m

[0;35m🚀 Launching Error Tests (Basic)[0m
[0;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;34m📂 Script: test_errors.sh[0m
[0;34m⏰ Started: 2025-08-07 13:07:50[0m
[0;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[1;33m=== PIPEX ERROR CODE TESTS ===[0m
Date: jeu. 07 août 2025 13:07:50 CEST
Utilisateur: zoum
Répertoire: /home/zoum/code/pipex/test
Log saved in: pipex_tests.log
Compiling pipex...
   → Running make clean...
   → Running make (basic version)...

[1;33m--- Exit Code Tests ---[0m
[0;34m🧪 Testing exit code:[0m No arguments
   Command: ../pipex
   Expected exit code: 1
   Pipex exitcode: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: No arguments

[0;34m🧪 Testing exit code:[0m Too few arguments
   Command: ../pipex infile
   Expected exit code: 1
   Pipex exitcode: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Too few arguments

[0;34m🧪 Testing exit code:[0m Non-existent input file
   Command: ../pipex nonexistent.txt cat wc -l outfile.txt
   Expected exit code: 1
   Pipex exitcode: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Non-existent input file

[0;34m🧪 Testing exit code:[0m No read permission on input
   Command: ../pipex read_only.txt cat wc -l outfile.txt
   Expected exit code: 1
   Pipex exitcode: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: No read permission on input

[0;34m🧪 Testing exit code:[0m Invalid first command
   Command: ../pipex valid_input.txt invalidcommand123 cat outfile.txt
   Expected exit code: 127
   Pipex exitcode: 127
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Invalid first command

[0;34m🧪 Testing exit code:[0m Invalid second command
   Command: ../pipex valid_input.txt cat invalidcommand456 outfile.txt
   Expected exit code: 127
   Pipex exitcode: 127
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Invalid second command

[0;34m🧪 Testing exit code:[0m No write permission on output dir
   Command: ../pipex valid_input.txt cat wc -l /root/noperm.txt
   Expected exit code: 1
   Pipex exitcode: 1
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: No write permission on output dir

[0;34m🧪 Testing exit code:[0m Valid execution
   Command: ../pipex valid_input.txt cat wc -l valid_out.txt
   Expected exit code: 0
   Pipex exitcode: 0
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Valid execution


[1;33m--- Error Message Tests ---[0m
[0;34m🧪 Testing error message:[0m Usage message
   Command: ../pipex
   Expected pattern: 'Usage'
   Pipex exitcode: 1
   Pipex output: 'Usage: ./pipex infile cmd1 cmd2 outfile'
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Usage message

[0;34m🧪 Testing error message:[0m File not found
   Command: ../pipex nonexistent.txt cat wc -l out.txt
   Expected pattern: 'No such file'
   Pipex exitcode: 1
   Pipex output: 'nonexistent.txt: No such file or directory'
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: File not found

[0;34m🧪 Testing error message:[0m Command not found
   Command: ../pipex valid_input.txt invalidcmd cat out.txt
   Expected pattern: 'command not found'
   Pipex exitcode: 127
   Pipex output: 'command not found: invalidcmd'
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Command not found


[1;33m--- Signal Handling Tests ---[0m
[0;34mTesting signal handling...[0m
Creating long-running test...
[0;32m✓ PASS[0m: Signal handling

[1;33m--- Memory Leak Tests (if valgrind available) ---[0m
[0;34mRunning valgrind memory tests...[0m
   [0;34mTesting memory leaks with valgrind...[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Memory leaks
   [0;34mTesting invalid memory access with valgrind...[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Memory access

[1;33m--- File Descriptor Tests ---[0m
[0;34mTesting file descriptor management...[0m
   [0;34mTesting FD cleanup after normal execution[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Quick execution
   [0;34mTesting FD cleanup after error[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Error case cleanup
   [0;34mTesting for FD leaks with multiple runs[0m
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Multiple execution FD test
   [0;34mTesting FD handling under stress[0m
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Stress test FD handling

[1;33m=== ERROR TEST SUMMARY ===[0m
Total tests: 18
[0;32mPassed: 18[0m
[0;31mFailed: 0[0m

[0;34mCleaning temporary files...[0m
Temporary files removed

[0;32m🎉 All error handling tests passed![0m
Complete log saved in: pipex_tests.log

[0;32m🎉 Error Tests (Basic) completed successfully![0m
[0;36m⏱️  Duration: 5s[0m
[0;36m⏰ Finished: 2025-08-07 13:07:55[0m

[0;36m🌟 Testing Bonus Version...[0m

[0;35m🚀 Launching Bonus Tests[0m
[0;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[0;34m📂 Script: test_bonus.sh[0m
[0;34m⏰ Started: 2025-08-07 13:07:56[0m
[0;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m
[1;33m=== PIPEX BONUS TESTS ===[0m
Date: jeu. 07 août 2025 13:07:56 CEST
Utilisateur: zoum
Répertoire: /home/zoum/code/pipex/test
Log saved in: pipex_tests.log
Compiling pipex with bonus...

[1;33m--- Multiple pipes tests ---[0m
[0;34m🧪 Testing multiple pipes:[0m Three commands
   Input file: test_multi.txt
   Commands: head -7 tail -5 wc -l
   [1;33m→[0m Pipex command: ../pipex "test_multi.txt" "head -7" "tail -5" "wc -l" "out_multi_pipex.txt"
   Pipex output: 5 ...
   Pipex exitcode: 0
   [1;33m→[0m Shell command: < "test_multi.txt" head -7 | tail -5 | wc -l > "out_multi_shell.txt"
   bash output: 5 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Three commands
   [0;34mVerifying memory and FD management...[0m
   [0;32m✓[0m File descriptors properly managed

[0;34m🧪 Testing multiple pipes:[0m Four commands
   Input file: test_fruits.txt
   Commands: sort uniq grep apple wc -l
   [1;33m→[0m Pipex command: ../pipex "test_fruits.txt" "sort" "uniq" "grep apple" "wc -l" "out_multi_pipex.txt"
   Pipex output: 1 ...
   Pipex exitcode: 0
   [1;33m→[0m Shell command: < "test_fruits.txt" sort | uniq | grep apple | wc -l > "out_multi_shell.txt"
   bash output: 1 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Four commands
   [0;34mVerifying memory and FD management...[0m
   [0;32m✓[0m File descriptors properly managed

[0;34m🧪 Testing multiple pipes:[0m Five commands
   Input file: test_mixed.txt
   Commands: cat grep -n line head -3 cut -d: -f2 wc -w
   [1;33m→[0m Pipex command: ../pipex "test_mixed.txt" "cat" "grep -n line" "head -3" "cut -d: -f2" "wc -w" "out_multi_pipex.txt"
   Pipex output: 14 ...
   Pipex exitcode: 0
   [1;33m→[0m Shell command: < "test_mixed.txt" cat | grep -n line | head -3 | cut -d: -f2 | wc -w > "out_multi_shell.txt"
   bash output: 14 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Five commands
   [0;34mVerifying memory and FD management...[0m
   [0;32m✓[0m File descriptors properly managed

[0;34m🧪 Testing multiple pipes:[0m Complex arguments
   Input file: test_numbers.txt
   Commands: cat tr ' ' '
' sort -n tail -5
   [1;33m→[0m Pipex command: ../pipex "test_numbers.txt" "cat" "tr ' ' '
'" "sort -n" "tail -5" "out_multi_pipex.txt"
   Pipex output: 5 6 7 8 9 ...
   Pipex exitcode: 0
   [1;33m→[0m Shell command: < "test_numbers.txt" cat | tr ' ' '
' | sort -n | tail -5 > "out_multi_shell.txt"
   bash output: 5 6 7 8 9 ...
   bash exitcode: 0
[0;32m✓ PASS[0m: Complex arguments
   [0;34mVerifying memory and FD management...[0m
   [0;32m✓[0m File descriptors properly managed


[1;33m--- Heredoc tests ---[0m

[0;34mNote: Heredoc tests require manual input simulation[0m
[0;34m🧪 Testing heredoc:[0m Basic heredoc
   Delimiter: EOF
   Input text: Hello World
This is a test
   Commands: cat | wc -l
   [1;33m→[0m Creating existing content in heredoc_out1.txt
   [1;33m→[0m Previous size: 1 lines
   [1;33m→[0m Testing heredoc (should append)...
   [1;33m→[0m Heredoc exit code: 0
   [0;32m✓[0m File descriptors properly managed
   [1;33m→[0m New size: 2 lines
[0;32m✓ PASS[0m: Basic heredoc - Append behavior
   [0;34mVerifying heredoc memory and FD management...[0m
   [0;32m✓[0m File descriptors properly managed
   [1;33m→[0m Comparing with shell heredoc...
[0;32m✓ PASS[0m: Basic heredoc - Heredoc content

[0;34m🧪 Testing heredoc:[0m Heredoc with grep
   Delimiter: END
   Input text: apple
banana
apple
cherry
   Commands: grep apple | wc -l
   [1;33m→[0m Creating existing content in heredoc_out2.txt
   [1;33m→[0m Previous size: 1 lines
   [1;33m→[0m Testing heredoc (should append)...
   [1;33m→[0m Heredoc exit code: 0
   [0;32m✓[0m File descriptors properly managed
   [1;33m→[0m New size: 2 lines
[0;32m✓ PASS[0m: Heredoc with grep - Append behavior
   [0;34mVerifying heredoc memory and FD management...[0m
   [0;32m✓[0m File descriptors properly managed
   [1;33m→[0m Comparing with shell heredoc...
[0;32m✓ PASS[0m: Heredoc with grep - Heredoc content

[0;34m🧪 Testing heredoc:[0m Heredoc multiple ops
   Delimiter: STOP
   Input text: 1
2
3
4
5
   Commands: sort -n | tail -3
   [1;33m→[0m Creating existing content in heredoc_out3.txt
   [1;33m→[0m Previous size: 1 lines
   [1;33m→[0m Testing heredoc (should append)...
   [1;33m→[0m Heredoc exit code: 0
   [0;32m✓[0m File descriptors properly managed
   [1;33m→[0m New size: 2 lines
[0;32m✓ PASS[0m: Heredoc multiple ops - Append behavior
   [0;34mVerifying heredoc memory and FD management...[0m
   [0;32m✓[0m File descriptors properly managed
   [1;33m→[0m Comparing with shell heredoc...
[0;32m✓ PASS[0m: Heredoc multiple ops - Heredoc content


[1;33m--- Error handling for bonus ---[0m
[0;34mTesting multiple pipes with errors[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Multiple pipes - too few args
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Invalid command in pipe

[1;33m--- Performance tests ---[0m
[0;34mTesting performance with large file[0m
   [0;32m✓[0m File descriptors properly managed
Pipex time: .012137813s
Shell time: .015229658s
[0;32m✓ PASS[0m: Performance test output

[1;33m--- Running complete basic tests with bonus executable ---[0m
[0;34m🧪 Running complete basic test suite with bonus executable[0m
   [1;33m→[0m This ensures bonus executable passes all basic functionality tests
   [1;33m→[0m Running basic test functions...
   [0;34mTesting basic cat | wc -l[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Basic cat | wc -l with bonus
   [0;34mTesting basic grep | wc -w[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Basic grep | wc -w with bonus
   [0;34mTesting basic sort | uniq[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Basic sort | uniq with bonus
   [0;34mTesting absolute path commands[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Absolute path commands with bonus
   [0;34mTesting commands with arguments[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Commands with arguments with bonus

[1;33m--- Running complete error tests with bonus executable ---[0m
[0;34m🧪 Running complete error test suite with bonus executable[0m
   [1;33m→[0m This ensures bonus executable handles all error cases correctly
   [0;34mTesting no arguments[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: No arguments with bonus
   [0;34mTesting too few arguments[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Too few arguments with bonus
   [0;34mTesting non-existent input file[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Non-existent file with bonus
   [0;34mTesting invalid first command[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Invalid first command with bonus
   [0;34mTesting invalid second command[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Invalid second command with bonus
   [0;34mTesting permission denied on output file[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Permission denied output with bonus
   [0;34mTesting empty command[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Empty command with bonus

[1;33m--- File descriptor tests for bonus features ---[0m
[0;34m🧪 Testing FD management with multiple pipes[0m
   [0;34mTesting FD cleanup with multiple pipes[0m
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Multiple pipes FD test
   [0;34mTesting FD cleanup with heredoc[0m
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Heredoc FD test
[0;32m✓ PASS[0m: Heredoc temp file cleanup
   [0;34mTesting complex pipes FD handling[0m
   [0;32m✓[0m File descriptors properly managed
[0;32m✓ PASS[0m: Complex pipes FD handling

[1;33m=== BONUS TEST SUMMARY ===[0m
Total tests: 29
[0;32mPassed: 29[0m
[0;31mFailed: 0[0m

[0;34mCleaning temporary files...[0m
Temporary files removed

[0;32m🎉 All bonus tests passed![0m
Complete log saved in: pipex_tests.log

[0;32m🎉 Bonus Tests completed successfully![0m
[0;36m⏱️  Duration: 5s[0m
[0;36m⏰ Finished: 2025-08-07 13:08:01[0m

[0;36m╔══════════════════════════════════════╗[0m
[0;36m║         COMPREHENSIVE SUMMARY        ║[0m
[0;36m╚══════════════════════════════════════╝[0m
[0;32m✅ Basic Tests: PASSED[0m
[0;32m✅ Error Tests (Basic): PASSED[0m
[0;32m✅ Bonus Tests: PASSED[0m

[0;36m📊 Overall Score: 3/3 test suites passed[0m
[0;32m🏆 PERFECT SCORE! Both basic and bonus versions work perfectly! 🏆[0m

[0;36m📝 Complete log available in: pipex_tests.log[0m
