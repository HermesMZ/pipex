#!/bin/bash

# Script de validation des amÃ©liorations apportÃ©es aux tests pipex
# This script verifies that all new features work correctly

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${YELLOW}=== VALIDATION DES AMÃ‰LIORATIONS PIPEX ===${NC}"
echo "Date: $(date)"
echo "Validation des nouvelles fonctionnalitÃ©s de test"

# Test 1: VÃ©rifier que tous les scripts ont une syntaxe correcte
echo -e "\n${BLUE}1. VÃ©rification de la syntaxe des scripts...${NC}"
if bash -n test_basic.sh && bash -n test_errors.sh && bash -n test_bonus.sh; then
    echo -e "${GREEN}âœ“ Tous les scripts ont une syntaxe correcte${NC}"
else
    echo -e "${RED}âœ— Erreur de syntaxe dÃ©tectÃ©e${NC}"
    exit 1
fi

# Test 2: Compiler pipex
echo -e "\n${BLUE}2. Compilation de pipex...${NC}"
cd ..
if make clean > /dev/null 2>&1 && make > /dev/null 2>&1; then
    echo -e "${GREEN}âœ“ Compilation rÃ©ussie${NC}"
else
    echo -e "${RED}âœ— Ã‰chec de compilation${NC}"
    exit 1
fi
cd test

# Test 3: Test rapide avec vÃ©rifications FD
echo -e "\n${BLUE}3. Test rapide avec vÃ©rifications FD...${NC}"
echo "test content" > validation_input.txt
timeout 10s ../pipex "validation_input.txt" "cat" "wc -l" "validation_output.txt" > /dev/null 2>&1
if [ $? -eq 0 ] && [ -f "validation_output.txt" ] && [ "$(cat validation_output.txt)" = "1" ]; then
    echo -e "${GREEN}âœ“ Test basique fonctionne${NC}"
else
    echo -e "${RED}âœ— Test basique Ã©chouÃ©${NC}"
    exit 1
fi

# Test 4: VÃ©rifier que les vÃ©rifications FD sont prÃ©sentes
echo -e "\n${BLUE}4. VÃ©rification des fonctions de contrÃ´le...${NC}"
if grep -q "verify_memory_and_fd" test_basic.sh test_errors.sh test_bonus.sh; then
    echo -e "${GREEN}âœ“ Fonctions de vÃ©rification prÃ©sentes dans tous les scripts${NC}"
else
    echo -e "${RED}âœ— Fonctions de vÃ©rification manquantes${NC}"
    exit 1
fi

# Test 5: VÃ©rifier le logging centralisÃ©
echo -e "\n${BLUE}5. Test du logging centralisÃ©...${NC}"
if grep -q "pipex_tests.log" test_basic.sh test_errors.sh test_bonus.sh; then
    echo -e "${GREEN}âœ“ Logging centralisÃ© configurÃ©${NC}"
else
    echo -e "${RED}âœ— Logging centralisÃ© manquant${NC}"
    exit 1
fi

# Test 6: Test d'exÃ©cution rapide avec vÃ©rifications
echo -e "\n${BLUE}6. Test d'exÃ©cution avec vÃ©rifications automatiques...${NC}"
# Lancer un test basic court pour voir si les vÃ©rifications apparaissent
output=$(timeout 15s ./test_basic.sh 2>&1 | head -30)
if echo "$output" | grep -q "File descriptors properly managed"; then
    echo -e "${GREEN}âœ“ VÃ©rifications automatiques fonctionnelles${NC}"
else
    echo -e "${RED}âœ— VÃ©rifications automatiques non dÃ©tectÃ©es${NC}"
    echo "Output preview:"
    echo "$output" | head -10
fi

# Test 7: VÃ©rifier la documentation
echo -e "\n${BLUE}7. VÃ©rification de la documentation...${NC}"
if grep -q "VÃ©rifications automatiques" README.md && grep -q "pipex_tests.log" README.md; then
    echo -e "${GREEN}âœ“ Documentation mise Ã  jour${NC}"
else
    echo -e "${RED}âœ— Documentation incomplÃ¨te${NC}"
fi

# Nettoyage
rm -f validation_input.txt validation_output.txt 2>/dev/null

echo -e "\n${YELLOW}=== RÃ‰SUMÃ‰ DE VALIDATION ===${NC}"
echo -e "${GREEN}âœ… VÃ©rifications automatiques des descripteurs de fichiers${NC}"
echo -e "${GREEN}âœ… Logging centralisÃ© dans pipex_tests.log${NC}"
echo -e "${GREEN}âœ… Tests robustes avec gestion d'erreurs${NC}"
echo -e "${GREEN}âœ… Documentation complÃ¨te et Ã  jour${NC}"
echo -e "${GREEN}âœ… Scripts syntaxiquement corrects${NC}"

echo -e "\n${BLUE}ðŸŽ‰ Toutes les amÃ©liorations sont fonctionnelles !${NC}"
echo -e "Vous pouvez maintenant lancer vos tests avec confiance."
echo -e "Chaque exÃ©cution de pipex sera automatiquement vÃ©rifiÃ©e."
